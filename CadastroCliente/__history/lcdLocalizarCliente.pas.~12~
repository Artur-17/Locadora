unit lcdLocalizarCliente;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, cxGraphics, cxLookAndFeels, cxLookAndFeelPainters, Menus,
  dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinBlueprint, dxSkinCaramel,
  dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinDevExpressDarkStyle,
  dxSkinDevExpressStyle, dxSkinFoggy, dxSkinGlassOceans, dxSkinHighContrast,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMetropolis, dxSkinMetropolisDark, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinOffice2013DarkGray,
  dxSkinOffice2013LightGray, dxSkinOffice2013White, dxSkinOffice2016Colorful,
  dxSkinOffice2016Dark, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic,
  dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime, dxSkinStardust,
  dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxControls, cxStyles, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxEdit, cxNavigator, dxDateRanges, DB, cxDBData, DBCtrls,
  cxGridLevel, cxGridCustomTableView, cxGridTableView, cxGridDBTableView,
  cxClasses, cxGridCustomView, cxGrid, StdCtrls, cxButtons, ExtCtrls, MemDS,
  DBAccess, Uni, lcdDataModule, lcdCadastroCliente;

type
  TLocalizarCliente = class(TForm)
    pnlTop: TPanel;
    edtPesquisa: TEdit;
    btnPesquisar: TcxButton;
    pnlClient: TPanel;
    grid: TcxGrid;
    gridTbv: TcxGridDBTableView;
    gridLvl: TcxGridLevel;
    pnlBottom: TPanel;
    btnAlterar: TcxButton;
    btnExcluir: TcxButton;
    btnFechar: TcxButton;
    btnIncluir: TcxButton;
    DBNavigator: TDBNavigator;
    qryCliente: TUniQuery;
    qryClienteID: TIntegerField;
    qryClienteNOME: TStringField;
    qryClienteCPF: TStringField;
    qryClienteEMAIL: TStringField;
    qryClienteTELEFONE: TStringField;
    qryClienteDT_NASCIMENTO: TDateField;
    qryClienteESTADO: TStringField;
    qryClienteLOGRADOURO: TStringField;
    qryClienteBAIRRO: TStringField;
    qryClienteCIDADE: TStringField;
    qryClienteCOMPLEMENTO: TStringField;
    qryClienteOBSERVACAO: TStringField;
    dtsCliente: TDataSource;
    gridTbvID: TcxGridDBColumn;
    gridTbvNOME: TcxGridDBColumn;
    gridTbvCPF: TcxGridDBColumn;
    gridTbvEMAIL: TcxGridDBColumn;
    gridTbvTELEFONE: TcxGridDBColumn;
    gridTbvDT_NASCIMENTO: TcxGridDBColumn;
    gridTbvESTADO: TcxGridDBColumn;
    gridTbvLOGRADOURO: TcxGridDBColumn;
    gridTbvBAIRRO: TcxGridDBColumn;
    gridTbvCIDADE: TcxGridDBColumn;
    gridTbvCOMPLEMENTO: TcxGridDBColumn;
    gridTbvOBSERVACAO: TcxGridDBColumn;
    procedure btnFecharClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnPesquisarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnIncluirClick(Sender: TObject);
    procedure FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure AlterarDadosCliente();
    { Private declarations }
  public
    { Public declarations }
    class procedure ExibirLocalizarCliente();
  end;

var
  LocalizarCliente: TLocalizarCliente;

implementation

{$R *.dfm}

procedure TLocalizarCliente.AlterarDadosCliente;
var
  SelectAtual: string;
begin
  SelectAtual := qryCliente.FieldByName('ID').AsString ;

  qryCliente.Close;

  qryCliente.SQL.Clear;
  qryCliente.SQL.Add('Select * from cliente');
  qryCliente.SQL.Add('Where id = :Texto');
  qryCliente.ParamByName('Texto').AsString := '%'+edtPesquisa.Text+'%';
  qryCliente.Open;

end;

procedure TLocalizarCliente.btnFecharClick(Sender: TObject);
begin
  ModalResult := mrCancel;
end;

procedure TLocalizarCliente.btnIncluirClick(Sender: TObject);
begin
  TCadastroCliente.ExibirCadastroCliente();
end;

procedure TLocalizarCliente.btnPesquisarClick(Sender: TObject);
var
  selectOriginal : string;
  lQRY : TuniQuery;
begin

    lQRY := qryCliente;
    selectOriginal := 'SELECT * FROM CLIENTE' ;

    if (edtPesquisa.Text = '') then
      begin
        ShowMessage('Insira o nome do Cliente ou Código para pesquisar');
        edtPesquisa.SetFocus;
      end;

      if StrToIntDef(edtPesquisa.Text, 0) = 0  then
          //Tem letras
        try
          if lQRY.Active then
          begin
            lQRY.Close;
            lQRY.SQL.Clear;
            lQRY.SQL.Add('Select * from cliente');
            lQRY.SQL.Add('Where nome LIKE :Texto');
            lQRY.ParamByName('Texto').AsString := '%'+edtPesquisa.Text+'%';
            lQRY.Open;


          end;
        except
          on E: Exception do
            ShowMessage( E.Message );
        end
      else
        //é número
        try
          if lQRY.Active then
          begin
            lQRY.Close;
            lQRY.SQL.Clear;
            lQRY.SQL.Add('Select * from cliente');
            lQRY.SQL.Add('Where id LIKE :id');
            lQRY.ParamByName('id').AsString := '%'+edtPesquisa.Text+'%';
            lQRY.Open;


          end;
        except
          on E: Exception do
            ShowMessage( E.Message );
        end
end;

class procedure TLocalizarCliente.ExibirLocalizarCliente;
var
  lcadastro : TLocalizarCliente;
begin
  lcadastro := TLocalizarCliente.Create(nil);;
  lcadastro.ShowModal();
  FreeAndNil(lcadastro);
end;

procedure TLocalizarCliente.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (Key = VK_ESCAPE) then
    Close;
end;

procedure TLocalizarCliente.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (key = VK_F2) then
    TCadastroCliente.ExibirCadastroCliente();
end;

procedure TLocalizarCliente.FormShow(Sender: TObject);
begin

   try
    if not Assigned(qryCliente.Connection)  then
      qryCliente.Connection := dtmPrincipal.conexao;

    if not qryCliente.Connection.Connected then
      qryCliente.Connection.Connect();

    if not qryCliente.Active then
      qryCliente.Open;
  except
    on E: Exception do
      ShowMessage( E.Message );
  end;

end;

procedure TLocalizarCliente.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if qryCliente.Active then
    qryCliente.Close;

  if qryCliente.Active then
    qryCliente.Close;
end;

end.
